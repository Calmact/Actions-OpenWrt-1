#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

# pciutils

name: j1900_x86 immortalWrt

on:
  push:
    branches:
      - main
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: true
        default: 'false'
  schedule:
    - cron: 0 19 * * *
#  watch:
#    types: started

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: config/j1900imt.config
#  DIY_P1_SH: diyJ1900imt-part1.sh
#  DIY_P2_SH: diyJ1900imt-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: true
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-18.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo apt update -y
        sudo apt full-upgrade -y
        sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib g++-multilib \
          git gperf haveged help2man intltool lib32gcc1 libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
          libmpc-dev libmpfr-dev libncurses5-dev libncursesw5 libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
          mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip python3-ply \
          python-docutils qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip \
          vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        
    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone -b $REPO_BRANCH --single-branch $REPO_URL  openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        
    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        #chmod +x $DIY_P1_SH
        cd openwrt
        #$GITHUB_WORKSPACE/$DIY_P1_SH        
        #echo 'src-git kenzok8_small_package https://github.com/kenzok8/small-package' >>feeds.conf.default
        git clone https://github.com/BROBIRD/openwrt-r8168 ./package/r8168
        git clone https://github.com/sirpdboy/netspeedtest ./package/netspeedtest
        git clone https://github.com/sirpdboy/luci-app-poweroffdevice ./package/luci-app-poweroffdevice
        svn export https://github.com/messense/aliyundrive-webdav/trunk/openwrt ./package/aliyunwebdav
        #svn export https://github.com/coolsnowwolf/lede/trunk/package/lean/luci-app-pptp-server ./package/lean/luci-app-pptp-server 
        
        #install aliyunwebdav
        #cd package
        #mkdir aliyunwebdav
        #cd aliyunwebdav
        #git init
        #git remote add origin https://github.com/messense/aliyundrive-webdav
        #git config core.sparsecheckout true
        #echo openwrt/ >> .git/info/sparse-checkout
        #git pull origin main
        #cd ../..
        
    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a
 
    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        #chmod +x $DIY_P2_SH
        cd openwrt
        
        #$GITHUB_WORKSPACE/$DIY_P2_SH
        # Modify default IP
        sed -i 's/192.168.1.1/192.168.30.3/g' package/base-files/files/bin/config_generate
        sed -i 's/192.168.1.1/192.168.30.3/g' .config
        sed -i 's/192.168.1.255/192.168.30.255/g' .config
        # Modify hostname
        sed -i 's/ImmortalWrt/OpenWrt-Calmact/g' package/base-files/files/bin/config_generate
        # 时区修改
        # sed -i "s/timezone='UTC'/timezone='CST-8'/" package/base-files/files/bin/config_generate
        # sed -i "/timezone='CST-8'/a set system.@system[-1].zonename='Asia/Shanghai'" ./package/base-files/files/bin/config_generate
        #echo '修改时区'
        sed -i "s/'UTC'/'CST-8'\n                set system.@system[-1].zonename='Asia\/Shanghai'/g" package/base-files/files/bin/config_generate
        # 修改默认wifi名称ssid为Xiaomi_R4A
        sed -i 's/ssid=OpenWrt/ssid=J1900WRT/g' package/kernel/mac80211/files/lib/wifi/mac80211.sh 
        # Add kernel build user
         [ -z $(grep "CONFIG_KERNEL_BUILD_USER=" .config) ] &&
             echo 'CONFIG_KERNEL_BUILD_USER="Calmact"' >>.config ||
             sed -i 's@\(CONFIG_KERNEL_BUILD_USER=\).*@\1$"Calmact"@' .config
        # Add kernel build domain
         [ -z $(grep "CONFIG_KERNEL_BUILD_DOMAIN=" .config) ] &&
             echo 'CONFIG_KERNEL_BUILD_DOMAIN="GitHub Actions"' >>.config ||
             sed -i 's@\(CONFIG_KERNEL_BUILD_DOMAIN=\).*@\1$"GitHub Actions"@' .config

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Upload config file
      id: package
      run: |
        cd openwrt
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress .config 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8 V=99 2>&1 | tee download.log
        make check | tee check.log
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        
    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) V=99 2>&1 | tee build_j8.log|| make -j2 V=99 2>&1 | tee build_j2.log
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV 

    - name: Organize config and log files
      run: |
        cd openwrt
        [ -e .config ] && mv .config ./bin/targets/x86/64/.config  
        [ -e build_j8.log ] && mv build_j8.log ./bin/targets/x86/64/build_j8.log 
        [ -e build_j2.log ] && mv build_j2.log ./bin/targets/x86/64/build_j2.log   
        [ -e feeds.conf.default ] && mv feeds.conf.default ./bin/targets/x86/64/feeds.conf.default  
        [ -e download.log ] && mv download.log ./bin/targets/x86/64/download.log
        [ -e check.log ] && mv check.log ./bin/targets/x86/64/check.log
                
    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"
        
    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to cowtransfer
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"
    
    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"
    
    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "::set-output name=status::success"
    
    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 7
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
